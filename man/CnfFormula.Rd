% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CnfFormula.R
\name{CnfFormula}
\alias{CnfFormula}
\alias{as.CnfFormula}
\title{CNF Formulas}
\usage{
CnfFormula(clauses)

as.CnfFormula(x)
}
\arguments{
\item{clauses}{(\code{list} of \code{\link{CnfClause}}) \cr
A list of \code{\link{CnfClause}} objects. The formula represents the conjunction of these clauses.}

\item{x}{(any) \cr
The object to be coerced to a \code{CnfFormula} by \code{as.CnfFormula}.
Only \code{logical(1)}, \code{\link{CnfAtom}}, \code{\link{CnfClause}}, and \code{CnfFormula} itself are currently supported.}
}
\value{
A new \code{CnfFormula} object.
}
\description{
A \code{CnfFormula} is a conjunction of \code{\link{CnfClause}} objects. It represents a statement
that is true if all of the clauses are true. These are for example of the form

\if{html}{\out{<div class="sourceCode r">}}\preformatted{  (X \%among\% "a" | Y \%among\% "d") & Z \%among\% "g"
}\if{html}{\out{</div>}}

\code{CnfFormula} objects can be constructed explicitly, using the \code{CnfFormula()} constructor,
or implicitly, by using the \code{&} operator on \code{\link{CnfAtom}}s, \code{\link{CnfClause}}s, or other \code{CnfFormula} objects.

Upon construction, the \code{CnfFormula} is simplified by using various heuristics.
This includes unit propagation, subsumption elimination, and hidden tautology elimination.
Note that the order of clauses in a formula is not preserved.

If a \code{CnfFormula} contains no clauses, or only \code{TRUE} clauses, it evaluates to \code{TRUE}.
If it contains at least one clause that is always false, the formula evaluates to \code{FALSE}.
These values can be converted to, and from, \code{logical(1)} values using \code{as.logical()}
and \code{as.CnfFormula()}.

\code{CnfFormula} objects can be negated using the \code{!} operator. Beware that this
may lead to an exponential blow-up in the number of clauses.

This is part of the CNF representation tooling, which is currently considered
experimental; it is for internal use.
}
\examples{
u = CnfUniverse()
X = CnfSymbol(u, "X", c("a", "b", "c"))
Y = CnfSymbol(u, "Y", c("d", "e", "f"))
Z = CnfSymbol(u, "Z", c("g", "h", "i"))

(X \%among\% c("a", "b") | Y \%among\% c("d", "e")) &
  Z \%among\% c("g", "h")

# Negation of a formula
!(X \%among\% c("a", "b") | Y \%among\% c("d", "e")) &
  Z \%among\% c("g", "h")

## unit propagation
# The second clause can not be satisfied when X is "b", so it can be removed
# from the first clause.
(X \%among\% c("a", "b") | Y \%among\% c("d", "e")) &
  X \%among\% c("a", "c")

## subsumption elimination
# The first clause is a subset of the second clause; whenever the
# first clause is satisfied, the second clause is satisfied as well, so it
# can be removed.
(X \%among\% "a" | Y \%among\% c("d", "e")) &
  (X \%among\% c("a", "b") | Y \%among\% c("d", "e") | Z \%among\% "g")

## hidden tautology elimination
# The first two statements can only be satisfied if Y is either "d" or "e",
# since when X is "a" then Y must be "e", and when X is "b" then Y must be "d".
# The third statement is therefore implied by the first two, and can be
# removed.
(X \%among\% "a" | Y \%among\% "d") &
  (X \%among\% "b" | Y \%among\% "e") &
  (Y \%among\% c("d", "e"))

## Simple contradictions are recognized:
(X \%among\% "a") & (X \%among\% "b")
# Tautologies are preserved
(X \%among\% c("a", "b", "c")) & (Y \%among\% c("d", "e", "f"))

# But not all contradictions are recognized.
# Builtin heuristic CnfFormula preprocessing is not a SAT solver.
contradiction <- (X \%among\% "a" | Y \%among\% "d") &
  (X \%among\% "b" | Y \%among\% "e") &
  (X \%among\% "c" | Y \%among\% "f")
contradiction

# Negation of a contradiction results in a tautology, which is recognized
# and simplified to TRUE. However, note that this operation (1) generally has
# exponential complexity in the number of terms and (2) is currently also not
# particularly well optimized
!contradiction
}
\seealso{
Other CNF representation objects: 
\code{\link{CnfAtom}()},
\code{\link{CnfClause}()},
\code{\link{CnfSymbol}()},
\code{\link{CnfUniverse}()}
}
\concept{CNF representation objects}
\keyword{internal}
