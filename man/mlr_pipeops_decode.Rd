% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpDecode.R
\name{mlr_pipeops_decode}
\alias{mlr_pipeops_decode}
\alias{PipeOpDecode}
\title{Reverse Encoding}
\format{
\code{\link[R6:R6Class]{R6Class}} object inheriting from \code{\link{PipeOpTaskPreprocSimple}}/\code{\link{PipeOpTaskPreproc}}/\code{\link{PipeOp}}.
}
\description{
Reverses one-hot or treatment encoding of columns. It collapses multiple \code{numeric} or \code{integer} columns into one \code{factor}
column based on a specified grouping pattern of column names.

May be applied to multiple groups of columns, grouped by matching a common naming pattern. The grouping pattern is
extracted to form the name of the newly derived \code{factor} column, and levels are constructed from the previous column
names, with parts matching the grouping pattern removed. The level per row of the new factor column is generally
determined as the name of the column with the maximum value in the group.
For example, columns \code{x.1} and \code{x.2} might be collapsed into a new factor column \code{x} with levels \code{1} and \code{2}, while
columns \code{y.1} and \code{y.2} might be interpreted as a separate group and collapsed into a new column \code{y}.
}
\section{Construction}{


\if{html}{\out{<div class="sourceCode">}}\preformatted{PipeOpEncode$new(id = "decode", param_vals = list())
}\if{html}{\out{</div>}}
\itemize{
\item \code{id} :: \code{character(1)}\cr
Identifier of resulting object, default \code{"decode"}.
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise be set during construction. Default \code{list()}.
}
}

\section{Input and Output Channels}{

Input and output channels are inherited from \code{\link{PipeOpTaskPreproc}}.

The output is the input \code{\link[mlr3:Task]{Task}} with encoding columns collapsed into new decoded columns.
}

\section{State}{

The \verb{$state} is a named \code{list} with the \verb{$state} elements inherited from \code{\link{PipeOpTaskPreproc}}, as well as:
\itemize{
\item \code{colmaps} :: named \code{list}\cr
Named list of named character vectors. Each element is named according to the new column name extracted by
\code{group_pattern}. Each vector contains the level names for the new factor column that should be created, named by
the corresponding old column name. If \code{treatment_encoding} is \code{TRUE}, then each vector also contains \code{"ref"} as the
reference class with an empty string as name.
\item \code{treatment_encoding} :: \code{logical(1)}\cr
Indicates whether treatment encoding (\code{TRUE}) or one-hot encoding (\code{FALSE}) is assumed.
\item \code{cutoff} :: \code{numeric(1)}\cr
The cutoff value for identifying the reference level in case of treatment encoding.
\item \code{ties_method} :: \code{character(1)}\cr
Method for resolving ties when multiple columns have the same value. Options include \code{"first"}, \code{"last"}, or \code{"random"}.
}
}

\section{Parameters}{

The parameters are the parameters inherited from \code{\link{PipeOpTaskPreproc}}, as well as:
\itemize{
\item \code{group_pattern} :: \code{character(1)}\cr
A regular expression to be applied to column names. Should contain a capturing group for the new
column name, and match everything that should not be interpreted as the new factor levels (which are constructed as
the difference between column names and what \code{group_pattern} matches).
If set to \code{""}, all columns matching the \code{group_pattern} are collapsed into one factor column called
\code{pipeop.decoded}. Use \code{\link{PipeOpRenameColumns}} to rename this column.
Initialized to \code{"^([^.]+)\\\\."}, which would extract everything up to the first dot as the new column name and
construct new levels as everything after the first dot.
\item \code{treatment_encoding} :: \code{logical(1)}\cr
If \code{TRUE}, treatment encoding is assumed instead of one-hot encoding. Initialized to \code{FALSE}.
\item \code{treatment_cutoff} :: \code{numeric(1)}\cr
If \code{treatment_encoding} is \code{TRUE}, specifies a cutoff value for identifying the reference level. The reference level
is set to \code{"ref"} in rows where the value is less than or equal to a specified cutoff value (e.g., \code{0}) in all
columns in that group To change the name of the reference level, use \code{\link{PipeOp???}} (Mutate? ColApply?).
Initialized to \code{0}.
\item \code{ties_method} :: \code{character(1)}\cr
Method for resolving ties if multiple columns have the same value. Specifies the value from which of the columns
with the same value is to be picked. Options are \code{"first"}, \code{"last"}, or \code{"random"}. Initialized to \code{"random"}.
}
}

\section{Methods}{

Only methods inherited from \code{\link{PipeOpTaskPreprocSimple}}/\code{\link{PipeOpTaskPreproc}}/\code{\link{PipeOp}}.
}

\examples{
library("mlr3")

# Create example task with one-hot encoding
df = data.frame(
  target = runif(10),
  x.1 = rep(c(1, 0), 5),
  x.2 = rep(c(0, 1), 5),
  y.1 = rep(c(1, 0), 5),
  y.2 = rep(c(0, 1), 5),
  a = runif(10)
)
task = TaskRegr$new(id = "example", backend = df, target = "target")

pop = po("decode")

# Training
train_out = pop$train(list(task))[[1]]
# x.1 and x.2 are collapsed into x, same for y; a is ignored.
train_out$data()

# Create example task with treatment encoding
df = data.frame(
  target = runif(15),
  x.1 = rep(c(1, 0, 0), 5),
  x.2 = rep(c(0, 1, 0), 5)
)
task = TaskRegr$new(id = "example", backend = df, target = "target")

pop = po("decode")
pop$param_set$set_values(treatment_encoding = TRUE)

# Training
train_out = pop$train(list(task))[[1]]
# x.1 and x.2 are collapsed into x; in rows where all values
# are smaller or equal to 0, the reference level is set
train_out$data()

}
\seealso{
https://mlr-org.com/pipeops.html

Other PipeOps: 
\code{\link{PipeOp}},
\code{\link{PipeOpEnsemble}},
\code{\link{PipeOpImpute}},
\code{\link{PipeOpTargetTrafo}},
\code{\link{PipeOpTaskPreproc}},
\code{\link{PipeOpTaskPreprocSimple}},
\code{\link{mlr_pipeops}},
\code{\link{mlr_pipeops_adas}},
\code{\link{mlr_pipeops_blsmote}},
\code{\link{mlr_pipeops_boxcox}},
\code{\link{mlr_pipeops_branch}},
\code{\link{mlr_pipeops_chunk}},
\code{\link{mlr_pipeops_classbalancing}},
\code{\link{mlr_pipeops_classifavg}},
\code{\link{mlr_pipeops_classweights}},
\code{\link{mlr_pipeops_colapply}},
\code{\link{mlr_pipeops_collapsefactors}},
\code{\link{mlr_pipeops_colroles}},
\code{\link{mlr_pipeops_copy}},
\code{\link{mlr_pipeops_datefeatures}},
\code{\link{mlr_pipeops_encode}},
\code{\link{mlr_pipeops_encodeimpact}},
\code{\link{mlr_pipeops_encodelmer}},
\code{\link{mlr_pipeops_featureunion}},
\code{\link{mlr_pipeops_filter}},
\code{\link{mlr_pipeops_fixfactors}},
\code{\link{mlr_pipeops_histbin}},
\code{\link{mlr_pipeops_ica}},
\code{\link{mlr_pipeops_imputeconstant}},
\code{\link{mlr_pipeops_imputehist}},
\code{\link{mlr_pipeops_imputelearner}},
\code{\link{mlr_pipeops_imputemean}},
\code{\link{mlr_pipeops_imputemedian}},
\code{\link{mlr_pipeops_imputemode}},
\code{\link{mlr_pipeops_imputeoor}},
\code{\link{mlr_pipeops_imputesample}},
\code{\link{mlr_pipeops_kernelpca}},
\code{\link{mlr_pipeops_learner}},
\code{\link{mlr_pipeops_missind}},
\code{\link{mlr_pipeops_modelmatrix}},
\code{\link{mlr_pipeops_multiplicityexply}},
\code{\link{mlr_pipeops_multiplicityimply}},
\code{\link{mlr_pipeops_mutate}},
\code{\link{mlr_pipeops_nearmiss}},
\code{\link{mlr_pipeops_nmf}},
\code{\link{mlr_pipeops_nop}},
\code{\link{mlr_pipeops_ovrsplit}},
\code{\link{mlr_pipeops_ovrunite}},
\code{\link{mlr_pipeops_pca}},
\code{\link{mlr_pipeops_proxy}},
\code{\link{mlr_pipeops_quantilebin}},
\code{\link{mlr_pipeops_randomprojection}},
\code{\link{mlr_pipeops_randomresponse}},
\code{\link{mlr_pipeops_regravg}},
\code{\link{mlr_pipeops_removeconstants}},
\code{\link{mlr_pipeops_renamecolumns}},
\code{\link{mlr_pipeops_replicate}},
\code{\link{mlr_pipeops_rowapply}},
\code{\link{mlr_pipeops_scale}},
\code{\link{mlr_pipeops_scalemaxabs}},
\code{\link{mlr_pipeops_scalerange}},
\code{\link{mlr_pipeops_select}},
\code{\link{mlr_pipeops_smote}},
\code{\link{mlr_pipeops_smotenc}},
\code{\link{mlr_pipeops_spatialsign}},
\code{\link{mlr_pipeops_subsample}},
\code{\link{mlr_pipeops_targetinvert}},
\code{\link{mlr_pipeops_targetmutate}},
\code{\link{mlr_pipeops_targettrafoscalerange}},
\code{\link{mlr_pipeops_textvectorizer}},
\code{\link{mlr_pipeops_threshold}},
\code{\link{mlr_pipeops_tomek}},
\code{\link{mlr_pipeops_tunethreshold}},
\code{\link{mlr_pipeops_unbranch}},
\code{\link{mlr_pipeops_updatetarget}},
\code{\link{mlr_pipeops_vtreat}},
\code{\link{mlr_pipeops_yeojohnson}}
}
\concept{PipeOps}
